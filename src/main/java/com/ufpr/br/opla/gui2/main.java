/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ufpr.br.opla.gui2;

import arquitetura.io.ReaderConfig;
import com.ufpr.br.opla.algorithms.NSGAII;
import com.ufpr.br.opla.experiementsUtils.MutationOperatorsSelected;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import jmetal.experiments.*;

/**
 *
 * @author elf
 */
public class main extends javax.swing.JFrame {
    
    
    private ManagerApplicationConfig config = null;
    //private OplaServices oplaService = null;
    private String pathSmartyBck;
    private String pathConcernBck;
    private String pathRelationchipBck;
    private String pathPatternBck;
    private String crossoverProbabilityBck;
    private String mutationProbabilityBck;
    
    

    /**
     * Creates new form main
     */
    public main() throws Exception {
              
        initComponents();
        
        
        initAlgorithmsCombo();
        checkAllMutationOperatorsByDefault();
        hidePanelMutationOperatorsByDefault();
        hidePanelCrossoverProbabilityByDefault();
        hidePanelMutationProbabilityByDefault();
        checkAllMetricsByDefault();
         
        //db
        configureDb();
        
        try {
            UserHome.createDefaultOplaPathIfDontExists();

            String source = "config/application.yaml";
            String target = UserHome.getOplaUserHome() + "application.yaml";
            
            //Somente copia arquivo de configuracao se
            //ainda nao existir na pasta da oplatool do usuario
            if(!(new File(target).exists()))
                FileUtil.copy(source, target);

            UserHome.createProfilesPath();
            UserHome.createTemplatePath();
            UserHome.createOutputPath();
            UserHome.createTempPath(); //Manipulation dir. apenas para uso intenro

            config = new ManagerApplicationConfig();
        } catch (FileNotFoundException ex) {
             java.util.logging.Logger.getLogger(main.class.getName()).log(Level.SEVERE, ex.getMessage());
        }

        //Text Field are disabled
        fieldSmartyProfile.setEditable(false);
        fieldConcernProfile.setEditable(false);
        fieldPatterns.setEditable(false);
        fieldRelationships.setEditable(false);


        GuiServices guiservices = new GuiServices(config);
        guiservices.configureSmartyProfile(fieldSmartyProfile, checkSmarty, btnSmartyProfile);
        guiservices.configureConcernsProfile(fieldConcernProfile, checkConcerns, btnConcernProfile);
        guiservices.configurePatternsProfile(fieldPatterns, checkPatterns, btnPatternProfile);
        guiservices.configureRelationshipsProfile(fieldRelationships, checkRelationship, btnRelationshipProfile);
        guiservices.configureTemplates(fieldTemplate);
        guiservices.configureLocaleToSaveModels(fieldManipulationDir);

        guiservices.configureLocaleToExportModels(fieldOutput);
    }

    private void addOrRemoveOperatorMutation(final String operatorName) {
        if (!checkFeatureMutation.isSelected()) {            
            MutationOperatorsSelected.getSelectedMutationOperators()
                    .remove(operatorName);
        } else {
            MutationOperatorsSelected.getSelectedMutationOperators()
                    .add(operatorName);
        }
    }

    private void addToMetrics(JCheckBox check, final String metric) {
        if(check.isSelected()){
           VolatileConfs.getMetricsSelecteds().add(metric);
        }else{
           VolatileConfs.getMetricsSelecteds().remove(metric);
        }
    }

    private void executeNSGAII() {
        NSGAII nsgaii = new NSGAII();
        nsgaii.execute(comboAlgorithms, checkMutation, fieldMutationProb,
                       fieldArchitectureInput, fieldNumberOfRuns, fieldPopulationSize,
                       fieldMaxEvaluations, checkCrossover,
                       fieldCrossoverProbability);
    }

    private void initAlgorithmsCombo() {
        String algoritms[] = {"Select One", "NSGA-II", "PAES"};
        comboAlgorithms.removeAllItems();
        
        for (int i = 0; i < algoritms.length; i++)
            comboAlgorithms.addItem(algoritms[i]);
               
        comboAlgorithms.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ApplicationConfs = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        checkSmarty = new javax.swing.JCheckBox();
        checkConcerns = new javax.swing.JCheckBox();
        checkRelationship = new javax.swing.JCheckBox();
        checkPatterns = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        fieldSmartyProfile = new javax.swing.JTextField();
        btnSmartyProfile = new javax.swing.JButton();
        btnPatternProfile = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        fieldPatterns = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldConcernProfile = new javax.swing.JTextField();
        btnConcernProfile = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        fieldRelationships = new javax.swing.JTextField();
        btnRelationshipProfile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fieldTemplate = new javax.swing.JTextField();
        btnTemplate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        fieldManipulationDir = new javax.swing.JTextField();
        btnManipulationDir = new javax.swing.JButton();
        algorithms = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fieldNumberOfRuns = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldMaxEvaluations = new javax.swing.JTextField();
        panelCrossProb = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        fieldCrossoverProbability = new javax.swing.JTextField();
        crossProbSlider = new javax.swing.JSlider();
        panelMutationProb = new javax.swing.JPanel();
        mutatinProbSlider = new javax.swing.JSlider();
        fieldMutationProb = new javax.swing.JTextField();
        checkMutation = new javax.swing.JCheckBox();
        labelOperators = new javax.swing.JLabel();
        checkCrossover = new javax.swing.JCheckBox();
        comboAlgorithms = new javax.swing.JComboBox();
        labelAlgorithms = new javax.swing.JLabel();
        panelMetrics = new javax.swing.JPanel();
        checkConventional = new javax.swing.JCheckBox();
        checkElegance = new javax.swing.JCheckBox();
        checkPLAExt = new javax.swing.JCheckBox();
        checkFeatureDriven = new javax.swing.JCheckBox();
        panelOperatorsMutation = new javax.swing.JPanel();
        checkFeatureMutation = new javax.swing.JCheckBox();
        checkMoveMethod = new javax.swing.JCheckBox();
        checkMoveOperation = new javax.swing.JCheckBox();
        checkManagerClass = new javax.swing.JCheckBox();
        checkMoveAttribute = new javax.swing.JCheckBox();
        checkAddClass = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        fieldPopulationSize = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        fieldArchitectureInput = new javax.swing.JTextArea();
        btnCleanListArchs1 = new javax.swing.JButton();
        btnInput1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        fieldOutput = new javax.swing.JTextField();
        btnOutput = new javax.swing.JButton();
        btnRun = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OPLA-Tool 0.0.1");

        jButton1.setText("Visualize your application.yaml file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profiles Configuration", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        checkSmarty.setText("SMarty");
        checkSmarty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSmartyActionPerformed(evt);
            }
        });

        checkConcerns.setText("Concerns");
        checkConcerns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkConcernsActionPerformed(evt);
            }
        });

        checkRelationship.setText("Relationship");
        checkRelationship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRelationshipActionPerformed(evt);
            }
        });

        checkPatterns.setText("Patterns");
        checkPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPatternsActionPerformed(evt);
            }
        });

        jLabel1.setText("SMarty Profile:");

        fieldSmartyProfile.setName("pathToSmarty"); // NOI18N
        fieldSmartyProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldSmartyProfileActionPerformed(evt);
            }
        });

        btnSmartyProfile.setText("Browser...");
        btnSmartyProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmartyProfileActionPerformed(evt);
            }
        });

        btnPatternProfile.setText("Browser...");
        btnPatternProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatternProfileActionPerformed(evt);
            }
        });

        jLabel9.setText("Patterns Profile:");

        fieldPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldPatternsActionPerformed(evt);
            }
        });

        jLabel2.setText("Concerns Profile:");

        fieldConcernProfile.setName("sdfs"); // NOI18N
        fieldConcernProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldConcernProfileActionPerformed(evt);
            }
        });

        btnConcernProfile.setText("Browser...");
        btnConcernProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConcernProfileActionPerformed(evt);
            }
        });

        jLabel10.setText("Relationships Profile:");

        btnRelationshipProfile.setText("Browser...");
        btnRelationshipProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelationshipProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fieldSmartyProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSmartyProfile))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkSmarty)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkConcerns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkRelationship)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkPatterns))
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fieldConcernProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConcernProfile)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fieldPatterns, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPatternProfile)))
                        .addContainerGap(26, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(fieldRelationships, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRelationshipProfile)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkSmarty)
                    .addComponent(checkConcerns)
                    .addComponent(checkRelationship)
                    .addComponent(checkPatterns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldSmartyProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSmartyProfile)
                    .addComponent(fieldPatterns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPatternProfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldConcernProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConcernProfile)
                    .addComponent(fieldRelationships, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRelationshipProfile))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Template Configuration", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel7.setText("about templates");
        jLabel7.setToolTipText("<html><h3>About Templtes</h3><br/>\n\nTexto explicando brevemente o que são os templates e para que servem.");

        jLabel8.setText(" Directory:");

        btnTemplate.setText("Select a Directory...");
        btnTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTemplateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fieldTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTemplate))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manipulation Directory", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("about manipulation directory");

        jLabel15.setText("Directory");

        btnManipulationDir.setText("Select a Directory...");
        btnManipulationDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManipulationDirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(fieldManipulationDir, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnManipulationDir)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldManipulationDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnManipulationDir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ApplicationConfsLayout = new javax.swing.GroupLayout(ApplicationConfs);
        ApplicationConfs.setLayout(ApplicationConfsLayout);
        ApplicationConfsLayout.setHorizontalGroup(
            ApplicationConfsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ApplicationConfsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(ApplicationConfsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ApplicationConfsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        ApplicationConfsLayout.setVerticalGroup(
            ApplicationConfsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ApplicationConfsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(226, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Path Confs", ApplicationConfs);

        algorithms.setName("algorithms");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Experiment Settings", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        jLabel3.setText("Number of Runs:");

        fieldNumberOfRuns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNumberOfRunsActionPerformed(evt);
            }
        });
        fieldNumberOfRuns.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numberOfRunsFocusLost(evt);
            }
        });
        fieldNumberOfRuns.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNumberOfRunsKeyTyped(evt);
            }
        });

        jLabel4.setText("Max Evaluations:");

        fieldMaxEvaluations.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldMaxEvaluationsFocusLost(evt);
            }
        });
        fieldMaxEvaluations.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldMaxEvaluationsKeyTyped(evt);
            }
        });

        panelCrossProb.setBorder(javax.swing.BorderFactory.createTitledBorder("Crossover Probability"));

        fieldCrossoverProbability.setText("0.9");
        fieldCrossoverProbability.setEnabled(false);

        crossProbSlider.setMajorTickSpacing(1);
        crossProbSlider.setMaximum(10);
        crossProbSlider.setMinimum(1);
        crossProbSlider.setMinorTickSpacing(1);
        crossProbSlider.setPaintLabels(true);
        crossProbSlider.setPaintTicks(true);
        crossProbSlider.setSnapToTicks(true);
        crossProbSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                crossProbSliderMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout panelCrossProbLayout = new javax.swing.GroupLayout(panelCrossProb);
        panelCrossProb.setLayout(panelCrossProbLayout);
        panelCrossProbLayout.setHorizontalGroup(
            panelCrossProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCrossProbLayout.createSequentialGroup()
                .addComponent(crossProbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fieldCrossoverProbability, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(151, 151, 151))
        );
        panelCrossProbLayout.setVerticalGroup(
            panelCrossProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCrossProbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCrossProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(crossProbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelCrossProbLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldCrossoverProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMutationProb.setBorder(javax.swing.BorderFactory.createTitledBorder("Mutation Probability"));

        mutatinProbSlider.setMajorTickSpacing(1);
        mutatinProbSlider.setMaximum(10);
        mutatinProbSlider.setMinimum(1);
        mutatinProbSlider.setMinorTickSpacing(1);
        mutatinProbSlider.setPaintLabels(true);
        mutatinProbSlider.setPaintTicks(true);
        mutatinProbSlider.setSnapToTicks(true);
        mutatinProbSlider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mutatinProbSliderMouseDragged(evt);
            }
        });

        fieldMutationProb.setText("0.9");
        fieldMutationProb.setEnabled(false);

        javax.swing.GroupLayout panelMutationProbLayout = new javax.swing.GroupLayout(panelMutationProb);
        panelMutationProb.setLayout(panelMutationProbLayout);
        panelMutationProbLayout.setHorizontalGroup(
            panelMutationProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMutationProbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mutatinProbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldMutationProb, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelMutationProbLayout.setVerticalGroup(
            panelMutationProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMutationProbLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(panelMutationProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mutatinProbSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelMutationProbLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(fieldMutationProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checkMutation.setText("Mutation");
        checkMutation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMutationActionPerformed(evt);
            }
        });

        labelOperators.setText("Select operators which want to use");

        checkCrossover.setText("Crossover");
        checkCrossover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkCrossoverActionPerformed(evt);
            }
        });

        comboAlgorithms.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboAlgorithms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboAlgorithmsItemStateChanged(evt);
            }
        });
        comboAlgorithms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboAlgorithmsActionPerformed(evt);
            }
        });

        labelAlgorithms.setText("Select algorithm which want to use");

        panelMetrics.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Metrics", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        checkConventional.setText("Conventional");
        checkConventional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkConventionalActionPerformed(evt);
            }
        });

        checkElegance.setText("Elegance");
        checkElegance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEleganceActionPerformed(evt);
            }
        });

        checkPLAExt.setText("PLA Extensibility");
        checkPLAExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPLAExtActionPerformed(evt);
            }
        });

        checkFeatureDriven.setText("Feature Driven");
        checkFeatureDriven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFeatureDrivenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMetricsLayout = new javax.swing.GroupLayout(panelMetrics);
        panelMetrics.setLayout(panelMetricsLayout);
        panelMetricsLayout.setHorizontalGroup(
            panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetricsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkConventional)
                    .addComponent(checkElegance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkFeatureDriven)
                    .addComponent(checkPLAExt))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        panelMetricsLayout.setVerticalGroup(
            panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetricsLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkConventional)
                    .addComponent(checkPLAExt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMetricsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkElegance)
                    .addComponent(checkFeatureDriven))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        panelOperatorsMutation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Mutation Operators wich want to use", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        checkFeatureMutation.setText("Feature Mutation");
        checkFeatureMutation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkFeatureMutationActionPerformed(evt);
            }
        });

        checkMoveMethod.setText("Move Method Mutation");
        checkMoveMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMoveMethodActionPerformed(evt);
            }
        });

        checkMoveOperation.setText("Move Operation Mutation");
        checkMoveOperation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMoveOperationActionPerformed(evt);
            }
        });

        checkManagerClass.setText("Add Manager Class Mutation");

        checkMoveAttribute.setText("Move Attribute Mutation");
        checkMoveAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMoveAttributeActionPerformed(evt);
            }
        });

        checkAddClass.setText("Add Class Mutation");
        checkAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAddClassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOperatorsMutationLayout = new javax.swing.GroupLayout(panelOperatorsMutation);
        panelOperatorsMutation.setLayout(panelOperatorsMutationLayout);
        panelOperatorsMutationLayout.setHorizontalGroup(
            panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOperatorsMutationLayout.createSequentialGroup()
                .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelOperatorsMutationLayout.createSequentialGroup()
                            .addComponent(checkFeatureMutation)
                            .addGap(35, 35, 35))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOperatorsMutationLayout.createSequentialGroup()
                            .addComponent(checkMoveMethod)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(panelOperatorsMutationLayout.createSequentialGroup()
                        .addComponent(checkAddClass)
                        .addGap(27, 27, 27)))
                .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkMoveAttribute)
                    .addComponent(checkManagerClass)
                    .addComponent(checkMoveOperation))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelOperatorsMutationLayout.setVerticalGroup(
            panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOperatorsMutationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkFeatureMutation)
                    .addComponent(checkMoveOperation))
                .addGap(5, 5, 5)
                .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkMoveMethod)
                    .addComponent(checkManagerClass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOperatorsMutationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkAddClass)
                    .addComponent(checkMoveAttribute))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("Population Size:");

        fieldPopulationSize.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldPopulationSizeFocusLost(evt);
            }
        });
        fieldPopulationSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldPopulationSizeKeyTyped(evt);
            }
        });

        jLabel12.setText("Status:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(checkMutation)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkCrossover))
                                    .addComponent(labelOperators)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(fieldPopulationSize, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(32, 32, 32)
                                .addComponent(panelOperatorsMutation, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(panelCrossProb, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(panelMutationProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fieldNumberOfRuns, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fieldMaxEvaluations, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(labelAlgorithms))))
                                .addGap(22, 22, 22)
                                .addComponent(panelMetrics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(464, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(163, 163, 163))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(22, 22, 22)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(labelAlgorithms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(fieldNumberOfRuns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(fieldMaxEvaluations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(fieldPopulationSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelOperators)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkCrossover)
                            .addComponent(checkMutation)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(panelMetrics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelOperatorsMutation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelMutationProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelCrossProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input Architecture(s)", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        jLabel11.setText("A list of paths separated by comma");

        fieldArchitectureInput.setColumns(20);
        fieldArchitectureInput.setRows(5);
        jScrollPane2.setViewportView(fieldArchitectureInput);

        btnCleanListArchs1.setText("Clean");
        btnCleanListArchs1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanListArchs1ActionPerformed(evt);
            }
        });

        btnInput1.setText("Confirme");
        btnInput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInput1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnInput1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCleanListArchs1))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel11)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCleanListArchs1)
                    .addComponent(btnInput1))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select where you want save outputs", 0, 0, new java.awt.Font("Verdana", 1, 14), java.awt.Color.magenta)); // NOI18N

        fieldOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldOutputActionPerformed(evt);
            }
        });

        btnOutput.setText("Select a Directory...");
        btnOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnOutput)
                    .addComponent(fieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fieldOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOutput)
                .addContainerGap())
        );

        btnRun.setText("run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout algorithmsLayout = new javax.swing.GroupLayout(algorithms);
        algorithms.setLayout(algorithmsLayout);
        algorithmsLayout.setHorizontalGroup(
            algorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(algorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(algorithmsLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addGroup(algorithmsLayout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(algorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(algorithmsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, algorithmsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRun)
                                .addGap(109, 109, 109))))))
        );
        algorithmsLayout.setVerticalGroup(
            algorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(algorithmsLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(algorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(algorithmsLayout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(algorithmsLayout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRun)
                        .addGap(24, 24, 24))))
        );

        jTabbedPane1.addTab("Experiment Confs", algorithms);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Paths Confs");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConcernProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConcernProfileActionPerformed
        String newPath = fileChooser(fieldConcernProfile, "uml");
        if (newPath.equals("")) {
            this.config.updatePathToProfileConcerns(fieldConcernProfile.getText());
        } else {
            this.config.updatePathToProfileConcerns(newPath);
        }
    }//GEN-LAST:event_btnConcernProfileActionPerformed

    private void btnSmartyProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmartyProfileActionPerformed
        String newPath = fileChooser(fieldSmartyProfile, "uml");
        if (newPath.equals("")) {
            this.config.updatePathToProfileSmarty(fieldSmartyProfile.getText());
        } else {
            this.config.updatePathToProfileSmarty(newPath);
        }
    }//GEN-LAST:event_btnSmartyProfileActionPerformed

    private void fieldConcernProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldConcernProfileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldConcernProfileActionPerformed

    private void fieldSmartyProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldSmartyProfileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldSmartyProfileActionPerformed

    private void btnTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTemplateActionPerformed
        String path = dirChooser(fieldTemplate);
        if ("".equals(path)) {
            this.config.updatePathToTemplateFiles(fieldTemplate.getText()+UserHome.getFileSeparator());
        } else {
            this.config.updatePathToTemplateFiles(path+UserHome.getFileSeparator());
        }
    }//GEN-LAST:event_btnTemplateActionPerformed

    private String dirChooser(JTextField field) throws HeadlessException {
        JFileChooser c = new JFileChooser();
        String path;
        c.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            path = c.getSelectedFile().getAbsolutePath();
            field.setText(path+UserHome.getFileSeparator());
            field.updateUI();
            return path;
        }
        return "";
    }

    private void btnRelationshipProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelationshipProfileActionPerformed
        String newPath = fileChooser(fieldRelationships, "uml");
        if (newPath.equals("")) {
            this.config.updatePathToProfileRelationships(fieldRelationships.getText());
        } else {
            this.config.updatePathToProfileRelationships(newPath);
        }
    }//GEN-LAST:event_btnRelationshipProfileActionPerformed

    private void fieldPatternsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldPatternsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldPatternsActionPerformed

    private void btnPatternProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatternProfileActionPerformed
        String newPath = fileChooser(fieldPatterns, "uml");
        if ("".equals(newPath)) {
            this.config.updatePathToProfilePatterns(fieldPatterns.getText());
        } else {
            this.config.updatePathToProfilePatterns(newPath);
        }
    }//GEN-LAST:event_btnPatternProfileActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        StringBuffer sb = new StringBuffer();
        sb.append("Application.yml file content").append("\n\n");
        sb.append("directoryToExportModels:").append(config.getConfig().getDirectoryToExportModels()).append("\n");
        sb.append("pathToProfile:").append(config.getConfig().getPathToProfile()).append("\n");
        sb.append("pathToProfileConcern:").append(config.getConfig().getPathToProfileConcern()).append("\n");
        sb.append("pathToProfilePatterns").append(config.getConfig().getPathToProfilePatterns()).append("\n");
        sb.append("pathToProfileRelationships").append(config.getConfig().getPathToProfileRelationships()).append("\n");
        sb.append("pathToTemplateModelsDirectory").append(config.getConfig().getPathToTemplateModelsDirectory()).append("\n");
        JOptionPane.showMessageDialog(null, sb);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnManipulationDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManipulationDirActionPerformed
        String path = dirChooser(fieldManipulationDir);
        if ("".equals(path)) {
            this.config.updatePathToSaveModels(fieldManipulationDir.getText()+UserHome.getFileSeparator());
        } else {
            this.config.updatePathToSaveModels(path+UserHome.getFileSeparator());
        }
    }//GEN-LAST:event_btnManipulationDirActionPerformed

    private void checkSmartyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSmartyActionPerformed
        if (!checkSmarty.isSelected()) {
            fieldSmartyProfile.setText(pathSmartyBck);
            btnSmartyProfile.setEnabled(true);
            this.config.updatePathToProfileSmarty(pathSmartyBck);
        } else {
            pathSmartyBck = fieldSmartyProfile.getText();
            fieldSmartyProfile.setText("");
            this.config.updatePathToProfileSmarty("");
            btnSmartyProfile.setEnabled(false);
        }
    }//GEN-LAST:event_checkSmartyActionPerformed

    private void checkConcernsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkConcernsActionPerformed
        if (!checkConcerns.isSelected()) {
            fieldConcernProfile.setText(pathConcernBck);
            btnConcernProfile.setEnabled(true);
            this.config.updatePathToProfileConcerns(pathConcernBck);
        } else {
            pathConcernBck = fieldConcernProfile.getText();
            fieldConcernProfile.setText("");
            this.config.updatePathToProfileConcerns("");
            btnConcernProfile.setEnabled(false);
        }
    }//GEN-LAST:event_checkConcernsActionPerformed

    private void checkRelationshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRelationshipActionPerformed
        if (!checkRelationship.isSelected()) {
            fieldRelationships.setText(pathRelationchipBck);
            btnRelationshipProfile.setEnabled(true);
            this.config.updatePathToProfileRelationships(pathRelationchipBck);
        } else {
            pathRelationchipBck = fieldRelationships.getText();
            fieldRelationships.setText("");
            this.config.updatePathToProfileRelationships("");
            btnRelationshipProfile.setEnabled(false);
        }
    }//GEN-LAST:event_checkRelationshipActionPerformed

    private void checkPatternsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPatternsActionPerformed
        if (!checkPatterns.isSelected()) {
            fieldPatterns.setText(pathPatternBck);
            btnPatternProfile.setEnabled(true);
            this.config.updatePathToProfilePatterns(pathPatternBck);
        } else {
            pathPatternBck = fieldPatterns.getText();
            fieldPatterns.setText("");
            this.config.updatePathToProfilePatterns("");
            btnPatternProfile.setEnabled(false);
        }
    }//GEN-LAST:event_checkPatternsActionPerformed

    private void comboAlgorithmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboAlgorithmsActionPerformed
       
    }//GEN-LAST:event_comboAlgorithmsActionPerformed

    private void checkMutationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMutationActionPerformed
        if(!checkMutation.isSelected()){
            panelOperatorsMutation.setVisible(false);
            panelMutationProb.setVisible(false);
        }else{
            panelOperatorsMutation.setVisible(true);
            if(crossoverProbabilityBck != null)
                fieldCrossoverProbability.setText(crossoverProbabilityBck);
            panelMutationProb.setVisible(true);
        }
    }//GEN-LAST:event_checkMutationActionPerformed

    private void checkAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAddClassActionPerformed
                addOrRemoveOperatorMutation(FeatureMutationOperators
                .ADD_CLASS_MUTATION.getOperatorName());
    }//GEN-LAST:event_checkAddClassActionPerformed

    private void checkMoveAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMoveAttributeActionPerformed
                addOrRemoveOperatorMutation(FeatureMutationOperators
                .MOVE_ATTRIBUTE_MUTATION.getOperatorName());
    }//GEN-LAST:event_checkMoveAttributeActionPerformed

    private void checkFeatureMutationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFeatureMutationActionPerformed
        addOrRemoveOperatorMutation(FeatureMutationOperators
                .FEATURE_MUTATION.getOperatorName());
    }//GEN-LAST:event_checkFeatureMutationActionPerformed

    private void checkMoveMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMoveMethodActionPerformed
        addOrRemoveOperatorMutation(FeatureMutationOperators
                .MOVE_METHOD_MUTATION.getOperatorName());
    }//GEN-LAST:event_checkMoveMethodActionPerformed

    private void checkMoveOperationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMoveOperationActionPerformed
        addOrRemoveOperatorMutation(FeatureMutationOperators
                .MOVE_OPERATION_MUTATION.getOperatorName());
    }//GEN-LAST:event_checkMoveOperationActionPerformed

    private void crossProbSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crossProbSliderMouseDragged
        double a = (double) crossProbSlider.getValue() / 10;
        fieldCrossoverProbability.setText(String.valueOf(a));
    }//GEN-LAST:event_crossProbSliderMouseDragged

    private void checkCrossoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkCrossoverActionPerformed
        if(checkCrossover.isSelected()){
            if(crossoverProbabilityBck != null)
                fieldCrossoverProbability.setText(crossoverProbabilityBck);
            panelCrossProb.setVisible(true);
        }else{
            crossoverProbabilityBck = fieldCrossoverProbability.getText();
            fieldCrossoverProbability.setText("0");
            panelCrossProb.setVisible(false);
        }  
    }//GEN-LAST:event_checkCrossoverActionPerformed

    private void mutatinProbSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mutatinProbSliderMouseDragged
        double a = (double) mutatinProbSlider.getValue() / 10;
        fieldMutationProb.setText(String.valueOf(a));
    }//GEN-LAST:event_mutatinProbSliderMouseDragged

    private void btnCleanListArchs1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanListArchs1ActionPerformed
        fieldArchitectureInput.setText("");
        VolatileConfs.setArchitectureInputPath(null);
    }//GEN-LAST:event_btnCleanListArchs1ActionPerformed

    private void btnInput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInput1ActionPerformed
        Validators.validateEntries(fieldArchitectureInput.getText().split(","));
    }//GEN-LAST:event_btnInput1ActionPerformed

    private void fieldOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldOutputActionPerformed

    private void btnOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputActionPerformed
        String path = dirChooser(fieldOutput);
        if ("".equals(path)) {
            this.config.updatePathToExportModels(fieldOutput.getText()+UserHome.getFileSeparator());
        } else {
            this.config.updatePathToExportModels(path+UserHome.getFileSeparator());
        }
    }//GEN-LAST:event_btnOutputActionPerformed

    private void comboAlgorithmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboAlgorithmsItemStateChanged
        if(comboAlgorithms.getSelectedItem() != null && comboAlgorithms.getSelectedIndex() != 0){
            VolatileConfs.setAlgorithmName(comboAlgorithms.getSelectedItem().toString());
            Logger.getLogger(main.class.getName()).log(Level.INFO, "Selected: " + comboAlgorithms.getSelectedItem().toString());
        }else{
            VolatileConfs.setAlgorithmName(null);
        }
    }//GEN-LAST:event_comboAlgorithmsItemStateChanged

    private void checkEleganceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEleganceActionPerformed
        final String metric = Metrics.ELEGANCE.getName();
        addToMetrics(checkElegance, metric);
    }//GEN-LAST:event_checkEleganceActionPerformed

    private void checkConventionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkConventionalActionPerformed
        final String metric = Metrics.CONVENTIONAL.getName();
        addToMetrics(checkConventional, metric);
    }//GEN-LAST:event_checkConventionalActionPerformed

    private void checkPLAExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPLAExtActionPerformed
        final String metric = Metrics.PLA_EXTENSIBILIY.getName();
        addToMetrics(checkPLAExt, metric);
    }//GEN-LAST:event_checkPLAExtActionPerformed

    private void checkFeatureDrivenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkFeatureDrivenActionPerformed
        final String metric = Metrics.FEATURE_DRIVEN.getName();
        addToMetrics(checkFeatureDriven, metric);
    }//GEN-LAST:event_checkFeatureDrivenActionPerformed

    private void numberOfRunsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numberOfRunsFocusLost
        if(isDigit(fieldNumberOfRuns.getText())){
            Logger.getLogger(main.class.getName()).log(Level.INFO, "Number Of Runs: {0}", fieldNumberOfRuns.getText());
            VolatileConfs.setNumberOfRuns(Integer.parseInt(fieldNumberOfRuns.getText()));
        }
    }//GEN-LAST:event_numberOfRunsFocusLost

    private void fieldNumberOfRunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNumberOfRunsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNumberOfRunsActionPerformed

    private void fieldMaxEvaluationsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldMaxEvaluationsFocusLost
       if(isDigit(fieldMaxEvaluations.getText())){
        Logger.getLogger(main.class.getName()).log(Level.INFO, "Max Evaluations: {0}", fieldMaxEvaluations.getText());
        VolatileConfs.setMaxEvaluations(Integer.parseInt(fieldMaxEvaluations.getText()));
        }
    }//GEN-LAST:event_fieldMaxEvaluationsFocusLost

    private void fieldPopulationSizeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldPopulationSizeFocusLost
        if(isDigit(fieldPopulationSize.getText())){
            Logger.getLogger(main.class.getName()).log(Level.INFO, "Population Size: {0}", fieldPopulationSize.getText());
            VolatileConfs.setPopulationSize(Integer.parseInt(fieldPopulationSize.getText()));
        }
    }//GEN-LAST:event_fieldPopulationSizeFocusLost

    private void fieldNumberOfRunsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNumberOfRunsKeyTyped
        onlyDigit(evt);
    }

    private boolean onlyDigit(KeyEvent evt) {
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c) || (c==KeyEvent.VK_BACK_SPACE) || c==KeyEvent.VK_DELETE)){
            getToolkit().beep();
            evt.consume(); 
            return false;
        }
        return true;
    }//GEN-LAST:event_fieldNumberOfRunsKeyTyped

    private void fieldMaxEvaluationsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldMaxEvaluationsKeyTyped
        onlyDigit(evt);
    }//GEN-LAST:event_fieldMaxEvaluationsKeyTyped

    private void fieldPopulationSizeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPopulationSizeKeyTyped
        onlyDigit(evt);
    }//GEN-LAST:event_fieldPopulationSizeKeyTyped

    /**
     * Rodar experimento
     * 
     * @param evt 
     */
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed

        //Validacoes inicias
        //Verifica se as entradas sao validas. Caso contrario finaliza
        if(!Validators.validateEntries(fieldArchitectureInput.getText().split(",")))
            return;
        
        //Recupera o algoritmo selecionado pelo usuário
        String algoritmToRun = VolatileConfs.getAlgorithmName();

        //Caso nenhum for selecionado, informa o usuario
        if(comboAlgorithms.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "You need select a algorithm");
        } else {
            //Pede confirmacao para o usuario para de fato executar o
            //experimento.
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "You have sure than"
                    + " want execute this experiement? This will take a time."
                    + " Meanwhile the UI will be blocked",
                    "You have sure?", dialogButton);
            //Caso usuário aceite, verifica qual algoritmo executar
            //E invoca a classe responsável.
            if (dialogResult == 0) {
                if ("NSGA-II".equals(algoritmToRun)) {
                    jLabel12.setText("Executando....");
                    java.awt.EventQueue.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            executeNSGAII();
                            jLabel12.setText("Finished....");
                        }
                    });
                }
            }
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private String fileChooser(JTextField fieldToSet, String allowExtension) throws HeadlessException {
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {

            File f = new File(c.getCurrentDirectory() + c.getSelectedFile().getName());
            String ext = FileUtil.getExtension(f);

            if (!ext.equalsIgnoreCase(allowExtension)) {
                JOptionPane.showMessageDialog(null, "The selected file is not allowed. You need selects a file with extension .uml, but you selects a ." + ext + " file");
                return "";
            } else {
                final String path = c.getCurrentDirectory() + "/" + c.getSelectedFile().getName();
                fieldToSet.setText(path);
                fieldToSet.updateUI();
                return path;

            }
        }

        return "";

    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ApplicationConfs;
    private javax.swing.JPanel algorithms;
    private javax.swing.JButton btnCleanListArchs1;
    private javax.swing.JButton btnConcernProfile;
    private javax.swing.JButton btnInput1;
    private javax.swing.JButton btnManipulationDir;
    private javax.swing.JButton btnOutput;
    private javax.swing.JButton btnPatternProfile;
    private javax.swing.JButton btnRelationshipProfile;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSmartyProfile;
    private javax.swing.JButton btnTemplate;
    private javax.swing.JCheckBox checkAddClass;
    private javax.swing.JCheckBox checkConcerns;
    private javax.swing.JCheckBox checkConventional;
    private javax.swing.JCheckBox checkCrossover;
    private javax.swing.JCheckBox checkElegance;
    private javax.swing.JCheckBox checkFeatureDriven;
    private javax.swing.JCheckBox checkFeatureMutation;
    private javax.swing.JCheckBox checkManagerClass;
    private javax.swing.JCheckBox checkMoveAttribute;
    private javax.swing.JCheckBox checkMoveMethod;
    private javax.swing.JCheckBox checkMoveOperation;
    private javax.swing.JCheckBox checkMutation;
    private javax.swing.JCheckBox checkPLAExt;
    private javax.swing.JCheckBox checkPatterns;
    private javax.swing.JCheckBox checkRelationship;
    private javax.swing.JCheckBox checkSmarty;
    private javax.swing.JComboBox comboAlgorithms;
    private javax.swing.JSlider crossProbSlider;
    private javax.swing.JTextArea fieldArchitectureInput;
    private javax.swing.JTextField fieldConcernProfile;
    private javax.swing.JTextField fieldCrossoverProbability;
    private javax.swing.JTextField fieldManipulationDir;
    private javax.swing.JTextField fieldMaxEvaluations;
    private javax.swing.JTextField fieldMutationProb;
    private javax.swing.JTextField fieldNumberOfRuns;
    private javax.swing.JTextField fieldOutput;
    private javax.swing.JTextField fieldPatterns;
    private javax.swing.JTextField fieldPopulationSize;
    private javax.swing.JTextField fieldRelationships;
    private javax.swing.JTextField fieldSmartyProfile;
    private javax.swing.JTextField fieldTemplate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelAlgorithms;
    private javax.swing.JLabel labelOperators;
    private javax.swing.JSlider mutatinProbSlider;
    private javax.swing.JPanel panelCrossProb;
    private javax.swing.JPanel panelMetrics;
    private javax.swing.JPanel panelMutationProb;
    private javax.swing.JPanel panelOperatorsMutation;
    // End of variables declaration//GEN-END:variables

   
    private void hidePanelMutationOperatorsByDefault() {
        panelOperatorsMutation.setVisible(false);
    }

    private void checkAllMutationOperatorsByDefault() {
       checkAddClass.setSelected(true);
       checkFeatureMutation.setSelected(true);
       checkManagerClass.setSelected(true);
       checkMoveAttribute.setSelected(true);
       checkMoveMethod.setSelected(true);
       checkMoveOperation.setSelected(true);
       
       FeatureMutationOperators[] operators = FeatureMutationOperators.values();
       for (FeatureMutationOperators operator : operators) {
            MutationOperatorsSelected.getSelectedMutationOperators()
                .add(operator.getOperatorName());
        }
    }

    private void hidePanelCrossoverProbabilityByDefault() {
        panelCrossProb.setVisible(false);
    }

    private void hidePanelMutationProbabilityByDefault() {
        panelMutationProb.setVisible(false);
    }

    private void checkAllMetricsByDefault() {
        checkElegance.setSelected(true);
        checkPLAExt.setSelected(true);
        checkConventional.setSelected(true);
        checkFeatureDriven.setSelected(true);
    }

    private boolean isDigit(String text) {
        try{
            Integer.parseInt(text);
        }catch(Exception e){
            return false;
        }   
        return true;
    }

    /**
     * Somente faz uma copia do banco de dados vazio para a pasta
     * da oplatool no diretorio do usaurio se o mesmo nao existir.
     **/
    private void configureDb() {
        final String pathDb = UserHome.getOplaUserHome() + "db/oplatool.db";
        
        if(!(new File(pathDb).exists())){
            File dirDb = new File(UserHome.getOplaUserHome() + "db/");
            if(!dirDb.exists())
                dirDb.mkdirs();
            
            FileUtil.copy("emptyDB/oplatool.db", pathDb);
        }
      
    }

}
